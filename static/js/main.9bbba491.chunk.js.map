{"version":3,"sources":["utils/date.js","components/calendar/nav.js","components/calendar/row.js","components/calendar/cell.js","components/calendar/index.js","components/templetes/calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["daysMap","getToday","currentDatetime","Date","format","locale","ko","getDay","getFirstDayByMonth","focusDate","startDay","startOfMonth","getCountDaysByMonth","getDaysInMonth","leftBig","source","target","compareAsc","dateStyle","boxSizing","padding","buttonStyle","backgroundColor","border","width","height","borderRadius","cursor","wrapStyle","display","justifyContent","paddingBottom","marginTop","Nav","props","style","onClick","onClickByPrevHandler","prevDate","sunMonths","getPrevMonthDate","onClickByNextHandler","nextDate","addMonths","getNextMonthDate","Row","flexWrap","textAlign","children","getRadiusByStart","isStart","getRadiusByEnd","isEnd","EmptyCell","styled","div","CellForm","disable","idx","getColos","hover","isSelect","header","Cell","msg","alert","onMouseUp","e","onDragEnd","parseInt","textContent","onMouseDown","onDragStart","onSelectDate","React","memo","useState","selectDate","setFocusDate","setStartDay","daysCnt","setDaysCnt","dragRange","setDragRange","useEffect","onSelectDates","_isDragEnd","map","day","_converDate","days","Array","keys","onDragStartHandler","onDragEndHandler","endDay","temp","concat","startDate","endDate","convertedDates","eachDayOfInterval","start","end","date","filter","disableDates","includes","length","_day","y","m","d","split","slice","year","month","_isDisable","beforeDisablePoint","isBefore","isAfter","afterDisablePoint","isDisableDates","_isSelect","selectDates","key","item","Fragment","CalendarTemplete","App","isShow","setIsShow","setSelectDate","setSelectDates","console","log","className","dates","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9bbba491.chunk.js","sourcesContent":["import getDay from 'date-fns/getDay';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport getDaysInMonth from 'date-fns/getDaysInMonth';\n\nimport addMonths from 'date-fns/addMonths';\nimport sunMonths from 'date-fns/subMonths';\n\nimport format from 'date-fns/format';\nimport compareAsc from 'date-fns/compareAsc';\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval';\n\n\nimport { ko } from 'date-fns/locale';\n\nconst FORMAT_DATE = \"yyyy-MM-dd\"\n\n/**\n * 일요일(0), 월요일(1), 화요일(2), 수요일(3), 목요일(4), 금요일(5), 토요일(6)\n */\n\nexport const daysMap = [\n  \"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\",\n] \n\n// 오늘날짜 - 표시때 쓸듯.\nexport function getToday() {\n  let currentDatetime = new Date()\n  let convertedFormat = format(currentDatetime, FORMAT_DATE, {locale: ko});\n  return [convertedFormat, getDay(currentDatetime)];\n}\n\n// 해당 년-월의 첫번째 요일\nexport function getFirstDayByMonth(focusDate) {\n  let startDay = startOfMonth(new Date(focusDate));\n\n  return getDay(startDay);\n}\n\n// 시작 ~ 마지막 날짜를 전달 받으면 그 사이의 날짜를 반환한다.\nexport function getRangeDates(startDate, endDate) {\n  return eachDayOfInterval({\n    start: new Date(startDate),\n    end: new Date(endDate),\n  }).map(date => format(new Date(date), FORMAT_DATE));\n}\n\n// 해당 달의 날짜\nexport function getCountDaysByMonth(focusDate) {\n  return getDaysInMonth(new Date(focusDate));\n}\n\n// 전달 날짜\nexport function getPrevMonthDate(focusDate) {\n  let prevDate = sunMonths(new Date(focusDate), 1)\n  let convertedFormat = format(prevDate, FORMAT_DATE, {locale: ko});\n  return [convertedFormat, getDay(prevDate)];\n}\n\n// 다음달 날짜\nexport function getNextMonthDate(focusDate) {\n  let nextDate = addMonths(new Date(focusDate), 1)\n  let convertedFormat = format(nextDate, FORMAT_DATE, {locale: ko});\n  return [convertedFormat, getDay(nextDate)];\n}\n\n// 포맷 변환\nexport function format_YYYYMMDD(y, m, d) {\n  return format(new Date(y, m-1, d), FORMAT_DATE);\n}\n\n// 크기비교 source < target true\nexport function rightBig ( source, target) {\n  return compareAsc(new Date(source), new Date(target)) === -1\n}\n\n// 크기비교 source > target false\nexport function leftBig ( source, target) {\n  return compareAsc(new Date(source), new Date(target)) !== -1\n}","import React from 'react';\n\nimport {\n  daysMap,\n  getPrevMonthDate, getNextMonthDate\n} from '../../utils/date';\n\nconst dateStyle = {\n  boxSizing: \"border-box\",\n  padding: 10,\n}\n\nconst buttonStyle = {\n  boxSizing: \"border-box\",\n  padding: 10,\n  backgroundColor: \"#e8e8e8\",\n  border: 0,\n  width: 36,\n  height: 36,\n  borderRadius: 5,\n  cursor: \"pointer\"\n}\n\nconst wrapStyle = {\n  width: \"100%\", \n  display: \"flex\", \n  justifyContent: \"space-between\", \n\n  paddingBottom: 10, \n  marginTop: 10 \n}\n\n// 현재날짜, 방향버튼\nconst Nav = (props) => {\n  const onClickByPrevHandler = () => {\n    props.onClickByPrevHandler(getPrevMonthDate(props.focusDate[0]))\n  }\n  const onClickByNextHandler = () => {\n    props.onClickByNextHandler(getNextMonthDate(props.focusDate[0]))\n  }\n\n  return (\n    <div style={wrapStyle}>\n      <div>\n        <button\n          style={buttonStyle}\n          onClick={onClickByPrevHandler}\n        >\n          {\"<\"}\n        </button>\n      </div>\n\n      <div style={dateStyle}>\n        {props.focusDate[0]} ({daysMap[props.focusDate[1]]})\n      </div>\n\n      <div>\n        <button\n          style={buttonStyle}\n          onClick={onClickByNextHandler}\n        >\n          {\">\"}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Nav;","import React from 'react';\n\nconst Row = (props) => {\n  let _style = {\n    width: \"100%\",\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    textAlign: \"center\",\n  }\n  return (\n    <div\n      style={_style}\n      {...props}\n    >\n      {props.children}\n    </div>\n  )\n\n};\n\nexport default Row;","import React from 'react';\n\nimport styled from 'styled-components';\n\n// 0, 7, 14, 21, 28 일요일: 순서 - 0이 7배수 #B6001A \n// 6, 13, 20, 27    토요일: 순서 - 6이 6배수 #174491 \n\nconst COLOR_RED = \"#B6001A\"\nconst COLOR_BLUE = \"#174491\"\nconst COLOR_BLACK = \"#000\"\n\nconst COLOR_SELECT = \"#E3EBF6\"\nconst COLOR_DISABLE = \"#E7E7E7\";\n\nconst BACKGROUND_DISABLE = \"\";\n\nconst getColos = (props) => {\n  if( props.disable) {\n    return COLOR_DISABLE\n  }\n  if (!props.idx || !((props.idx - 0) % 7)) { // 일요일 검사\n    return COLOR_RED ;\n  } else if (!((props.idx - 6) % 7)) { // // 토요일 검사\n    return COLOR_BLUE ;\n  } else {\n    return COLOR_BLACK ;\n  }\n}\n\nconst isSelect = (props) => {\n  return props.isSelect ? COLOR_SELECT : \"\";\n  // if (\n  //   props.dragRange[0] > -1\n  //   && props.dragRange[1] > -1\n  //   && props.idx >= props.dragRange[0] + props.startDay - 1\n  //   && props.idx <= props.dragRange[1] + props.startDay - 1\n  // ) {\n  //   return COLOR_SELECT\n  // }\n\n  // return \"\";\n}\n\nconst getRadiusByStart = (props) => {\n  if (props.isStart) return \"40px\";\n  else return \"\";\n}\n\nconst getRadiusByEnd = (props) => {\n  if (props.isEnd) return \"40px\";\n  else return \"\";\n}\n\nexport const EmptyCell = styled.div`\n  width : ${100 / 7}%;\n  height: 12vh;\n`\n\nconst CellForm = styled.div`\n  width : ${100 / 7}%;\n  // padding: 30px;\n  height: 12vh;\n  box-sizing: border-box;\n  color: ${(props) => getColos(props)};\n  font-weight: 900;\n  background-color: ${props => props.hover && !props.disable ? isSelect(props) : !props.header? BACKGROUND_DISABLE: \"\"};\n  \n  border-top-left-radius: ${getRadiusByStart};\n  border-bottom-left-radius: ${getRadiusByStart};\n\n  border-top-right-radius: ${props => getRadiusByEnd};\n  border-bottom-right-radius: ${props => getRadiusByEnd};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 5px;\n  &:hover{\n    background-color: ${(props) => props.hover && !props.disable ? COLOR_SELECT : \"\"};\n  }\n`\n\nconst Cell = (props) => {\n  const onDragStart = e => {\n    if (props.disable) {msg(); return}\n    props.onDragStart(parseInt(e.target.textContent))\n  }\n  const onDragEnd = e => {\n    if (props.disable) {msg(); return}\n    props.onDragEnd(parseInt(e.target.textContent)) \n  }\n\n  const onClick= e => {\n    if (props.disable) {msg(); return}\n    props.onSelectDate(e.target.textContent)\n  }\n\n  const msg = () =>alert(\"해당 날짜는 선택할 수 없습니다.\");\n  \n  if (props.hover) {\n    return (\n      <CellForm\n        {...props}\n        onMouseUp={onDragEnd}\n        onMouseDown={onDragStart}\n        onClick={onClick}\n      >\n        {props.children || \"\"}\n      </CellForm>\n    )\n  }\n  return (\n    <CellForm\n      {...props}\n    >\n      {props.children || \" \"}\n    </CellForm>\n  )\n}\n\nexport default Cell;","import React, { useEffect, useState } from 'react';\n\nimport {\n  getFirstDayByMonth,\n  getPrevMonthDate,\n  daysMap, getCountDaysByMonth,\n  format_YYYYMMDD,\n  leftBig,rightBig,\n  getRangeDates\n} from '../../utils/date';\n\nimport Nav from './nav';\nimport Row from './row';\nimport Cell, {EmptyCell} from './cell';\n\n/*\n*/\nconst Calendar = props => {\n  let [focusDate, setFocusDate] = useState(props.selectDate);\n  let [startDay, setStartDay] = useState(getFirstDayByMonth(props.selectDate[0]));\n  let [daysCnt, setDaysCnt] = useState(getCountDaysByMonth(props.selectDate[0]));\n  \n  let [ dragRange, setDragRange ] = useState([-1, -1]); // 드레그 [시작, 끝]\n \n  useEffect(() => {\n    setStartDay(getFirstDayByMonth(focusDate[0]));\n    setDaysCnt(getCountDaysByMonth(focusDate[0]));\n    setDragRange([-1, -1]);\n    props.onSelectDate(focusDate)\n    props.onSelectDates([focusDate[0], focusDate[0]])\n  }, [focusDate])\n  \n  useEffect(() => {\n    _isDragEnd()\n      // && !_isClick() \n      && props.onSelectDates(dragRange.map(day => _converDate(day)));\n  }, [dragRange])\n\n  let days = [...Array(daysCnt + startDay).keys()]\n\n  const onClickByPrevHandler = prevDate => setFocusDate(prevDate)\n  const onClickByNextHandler = nextDate => setFocusDate(nextDate)\n  const onDragStartHandler = startDay => {\n    setDragRange([startDay, -1])\n  }\n  const onDragEndHandler = endDay => {\n    let temp = [...dragRange]\n    if (dragRange[0] < endDay) {\n      temp[1] = endDay\n    }else {\n      temp = [endDay].concat([temp[0]])\n    }\n    \n    let convertedDates = temp.map(day => _converDate(day))\n    let isDisableIncludes = getRangeDates(convertedDates[0], convertedDates[1]).filter(day => props.disableDates.includes(day))\n    \n    if (!isDisableIncludes.length) {\n      setDragRange(temp)\n    } else {\n      alert(\"해당 날짜는 선택할 수 없습니다.\")\n      setDragRange([-1, -1])\n    }\n\n  }\n\n  const onSelectDate = day => {\n    if(!day) return\n    let temp = [...focusDate];\n    temp[0] = _converDate(day);\n    setFocusDate(temp);\n  }\n\n  const _converDate = _day => {\n    let [year, month] = focusDate[0].split('-').slice(0, 2)\n    return format_YYYYMMDD(year, month, _day);\n  }\n\n  const _isDisable = _day => {\n    if (!props.beforeDisablePoint) return false;\n    let d = _converDate(_day)\n    let isBefore = leftBig(props.beforeDisablePoint, d);\n    let isAfter = rightBig(props.afterDisablePoint, d);\n    let isDisableDates = props.disableDates.includes(d)\n\n    return isBefore || isAfter || isDisableDates\n  }\n\n  const _isSelect = _day => {\n    let d = _converDate(_day)\n    return leftBig(d, props.selectDates[0]) && leftBig(props.selectDates[1], d)\n  }\n\n  const isStart = idx => {\n    let target = _converDate(idx)\n    let start = props.selectDates.length && props.selectDates[0]\n    \n    return start === target;\n  }\n  \n  const isEnd = idx => {\n    let target = _converDate(idx)\n    let end = props.selectDates.length > 1 && props.selectDates[1]\n\n    return target === end;\n  }\n\n  const _isDragEnd = () => dragRange[0] > -1  && dragRange[1] > -1\n  const _isClick = () => props.selectDates[0] === props.selectDates[1]\n  const getDay = idx => idx - startDay + 1\n\n  return (\n    <div style={{ \n      backgroundColor: '#FAFAFA',\n      padding: 10,\n      boxSizing: 'border-box',\n    }}>\n      <Nav\n        focusDate={focusDate}\n        onClickByPrevHandler = {onClickByPrevHandler}\n        onClickByNextHandler = {onClickByNextHandler}\n      />\n      \n      <Row>\n        {daysMap.map((day, idx) => (\n          <Cell \n            key={idx} \n            idx={idx}\n            header={true}\n          >{day}</Cell>\n        ))}\n      </Row>\n\n      <Row>\n        {days.map((item, idx) => (\n          <React.Fragment key={idx}>\n            {startDay <= (idx) \n              ? (\n                <Cell \n                  idx={idx} \n                  hover={true}\n                  startDay={startDay}\n                  disable={_isDisable( getDay(idx))}\n                  isSelect={_isSelect(getDay(idx))}\n                  onDragStart={onDragStartHandler}\n                  onDragEnd={onDragEndHandler}\n                  onSelectDate={onSelectDate}\n                  isStart={isStart(getDay(idx))}\n                  isEnd={isEnd(getDay(idx))}\n                >{getDay(idx)}</Cell>\n              ) \n              : (\n                <EmptyCell />\n              )\n            }\n          </React.Fragment>\n        ))}\n      </Row>\n    </div>\n  );\n};\n\nexport default React.memo(Calendar);","import React from 'react';\n\nimport {\n  getToday\n} from '../../../utils/date';\n\nimport Calendar from '../../calendar';\n\nfunction CalendarTemplete(props) {\n  \n  return (\n    <Calendar \n      onSelectDate={props.onSelectDate || function () {}}\n      onSelectDates={props.onSelectDates || function () {}}\n      selectDate={props.selectDate || getToday()}\n      selectDates={props.selectDates || [getToday()[0], getToday()[0]]}\n      beforeDisablePoint={props.beforeDisablePoint || \"\"}\n      afterDisablePoint={props.afterDisablePoint || \"\"}\n      disableDates={props.disableDates || []}\n    />\n  );\n}\n\nexport default CalendarTemplete;\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  getToday\n} from './utils/date';\n\nimport Calendar from './components/templetes/calendar';\n\nfunction App() {\n  const [isShow, setIsShow] = useState(false);\n  const [selectDate, setSelectDate] = useState(getToday());\n  const [selectDates, setSelectDates] = useState([]);\n  \n  const [beforeDisablePoint] = useState(selectDate[0]);\n  const [afterDisablePoint] = useState(\"2021-01-21\");\n  const [disableDates] = useState([\"2021-01-13\"]);\n\n  useEffect(() => {\n    console.log('click select: ', selectDate)\n  }, [selectDate])\n  \n  useEffect(() => {\n    console.log('drag select: ', selectDates)\n  }, [selectDates])\n\n\n  return (\n    <div className=\"App\">\n\n      <h1>{selectDate[0]}</h1>\n      <button onClick={() => setIsShow(true)} >달력보기</button>\n      <div style={{display: isShow? \"block\": \"none\"}}>\n        <Calendar \n          onSelectDate={date => setSelectDate(date)}\n          onSelectDates={dates => setSelectDates(dates)}\n          selectDate={selectDate}\n          selectDates={selectDates}\n          beforeDisablePoint={beforeDisablePoint}\n          afterDisablePoint={afterDisablePoint}\n          disableDates={disableDates}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}